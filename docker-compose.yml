# This docker-compose.yml file demonstrates how to run a separate
# PostgreSQL database container for each microservice.

version: '3.8'

services:
  # =================================================================
  # Frontend Service (No changes needed)
  # =================================================================
  frontend:
    build:
      context: ./frontend
      args:
        - REACT_APP_API_URL=http://localhost:8080/api
    ports:
      - "3000:80"
    environment:
      - REACT_APP_API_URL=http://localhost:8080/api
    networks:
      - headhunt_net
    depends_on:
      - api-gateway

  # =================================================================
  # Authentication Service
  # =================================================================
  auth-service:
    build:
      context: ./services/auth-service
    environment:
      - PORT=4001
      - DB_HOST=postgres-auth # <-- Connects to the auth database
      - DB_USER=auth_user
      - DB_PASSWORD=auth_password
      - DB_DATABASE=auth_db
      - JWT_SECRET=your_jwt_secret_here
      - CORS_ORIGIN=http://localhost:3000
      - NODE_ENV=development
    networks:
      - headhunt_net
    depends_on:
      - postgres-auth

  # =================================================================
  # Job Service
  # =================================================================
  job-service:
    build:
      context: ./services/job-service
    environment:
      - PORT=4002
      - DB_HOST=postgres-jobs
      - DB_USER=jobs_user
      - DB_PASSWORD=jobs_password
      - DB_DATABASE=jobs_db
      - JWT_SECRET=your_jwt_secret_here
      - CORS_ORIGIN=http://localhost:3000
      - NODE_ENV=development
    networks:
      - headhunt_net
    depends_on:
      - postgres-jobs

  client-service:
    build:
      context: ./services/client-service
    environment:
      - PORT=4003
      - DB_HOST=postgres-clients
      - DB_USER=clients_user
      - DB_PASSWORD=clients_password
      - DB_DATABASE=clients_db
      - JWT_SECRET=your_jwt_secret_here
      - CORS_ORIGIN=http://localhost:3000
      - NODE_ENV=development
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_USER=guest
      - RABBITMQ_PASS=guest
      - RABBITMQ_VHOST=/
    networks:
      - headhunt_net
    depends_on:
      - postgres-clients
      - rabbitmq

  # =================================================================
  # Document Service
  # =================================================================
  document-service:
    build:
      context: ./services/document-service
    environment:
      - DATABASE_URL=postgresql://document_user:document_password@postgres-document-db:5432/document_db
      - NODE_ENV=development
      - MINIO_ENDPOINT=minio:9000
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin
      - MINIO_BUCKET_NAME=hr-platform-documents
      - MINIO_USE_SSL=false
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID:-minioadmin}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY:-minioadmin}
      - AWS_REGION=${AWS_REGION:-us-east-1}
      - S3_BUCKET_NAME=${S3_BUCKET_NAME:-hr-platform-documents}
      - S3_ENDPOINT_URL=${S3_ENDPOINT_URL:-http://minio:9000}
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_USER=guest
      - RABBITMQ_PASS=guest
      - RABBITMQ_VHOST=/
    ports:
      - "4004:4004"
    networks:
      - headhunt_net
    depends_on:
      - postgres-document-db
      - rabbitmq
      - minio
    volumes:
      - document_temp:/app/temp

  # =================================================================
  # RabbitMQ Message Queue
  # =================================================================
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: rabbitmq
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
    ports:
      - "5672:5672"   # AMQP protocol port
      - "15672:15672" # Management UI port
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - headhunt_net

  # =================================================================
  # MinIO Object Storage (S3 Compatible)
  # =================================================================
  minio:
    image: minio/minio:latest
    container_name: minio
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin
    ports:
      - "9000:9000"   # API port
      - "9001:9001"   # Console port
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    networks:
      - headhunt_net

  # =================================================================
  # API Gateway (No changes needed, but depends on new services)
  # =================================================================
  api-gateway:
    image: nginx:alpine
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "8080:80"
    networks:
      - headhunt_net
    depends_on:
      - auth-service
      - job-service
      - client-service
      - document-service

  # =================================================================
  # Database for Auth Service
  # =================================================================
  postgres-auth:
    image: postgres:15-alpine
    container_name: postgres-auth
    environment:
      - POSTGRES_USER=auth_user
      - POSTGRES_PASSWORD=auth_password
      - POSTGRES_DB=auth_db
    ports:
      - "5432:5432" # Host port 5432 maps to this container's 5432
    volumes:
      - postgres_auth_data:/var/lib/postgresql/data
    networks:
      - headhunt_net

  # =================================================================
  # NEW: Database for Job Service
  # =================================================================
  postgres-jobs:
    image: postgres:15-alpine
    container_name: postgres-jobs-db
    environment:
      - POSTGRES_USER=jobs_user
      - POSTGRES_PASSWORD=jobs_password
      - POSTGRES_DB=jobs_db
    ports:
      - "5433:5432" # Host port 5433 maps to this container's 5432 to avoid conflict
    volumes:
      - postgres_jobs_data:/var/lib/postgresql/data
    networks:
      - headhunt_net

  postgres-clients:
    image: postgres:15-alpine
    container_name: postgres-clients-db
    environment:
      - POSTGRES_USER=clients_user
      - POSTGRES_PASSWORD=clients_password
      - POSTGRES_DB=clients_db
    ports:
      - "5434:5432" # Host port 5434 maps to this container's 5432 to avoid conflict
    volumes:
      - postgres_clients_data:/var/lib/postgresql/data
    networks:
      - headhunt_net

  # =================================================================
  # Database for Document Service
  # =================================================================
  postgres-document-db:
    image: postgres:15-alpine
    container_name: postgres-document-db
    environment:
      - POSTGRES_USER=document_user
      - POSTGRES_PASSWORD=document_password
      - POSTGRES_DB=document_db
    ports:
      - "5435:5432" # Host port 5435 maps to this container's 5432 to avoid conflict
    volumes:
      - postgres_document_data:/var/lib/postgresql/data
      - ./services/document-service/init_db.sql:/docker-entrypoint-initdb.d/init_db.sql
    networks:
      - headhunt_net

# Define the network for all services to communicate
networks:
  headhunt_net:
    driver: bridge

# Define persistent data volumes for each database
volumes:
  postgres_auth_data:
  postgres_jobs_data:
  postgres_clients_data:
  postgres_document_data:
  rabbitmq_data:
  minio_data:
  document_temp:
